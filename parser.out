Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     expression -> expression AND expression
Rule 3     expression -> expression OOR expression
Rule 4     expression -> expression IMP expression
Rule 5     expression -> expression IMD expression
Rule 6     expression -> NEG expression
Rule 7     expression -> VAR
Rule 8     expression -> LPR expression RPR
Rule 9     empty -> <empty>

Terminals, with rules where they appear

AND                  : 2
IMD                  : 5
IMP                  : 4
LPR                  : 8
NEG                  : 6
OOR                  : 3
RPR                  : 8
VAR                  : 7
error                : 

Nonterminals, with rules where they appear

calc                 : 0
empty                : 
expression           : 1 2 2 3 3 4 4 5 5 6 8

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) expression -> . expression AND expression
    (3) expression -> . expression OOR expression
    (4) expression -> . expression IMP expression
    (5) expression -> . expression IMD expression
    (6) expression -> . NEG expression
    (7) expression -> . VAR
    (8) expression -> . LPR expression RPR

    NEG             shift and go to state 3
    VAR             shift and go to state 4
    LPR             shift and go to state 5

    calc                           shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (2) expression -> expression . AND expression
    (3) expression -> expression . OOR expression
    (4) expression -> expression . IMP expression
    (5) expression -> expression . IMD expression

    $end            reduce using rule 1 (calc -> expression .)
    AND             shift and go to state 6
    OOR             shift and go to state 7
    IMP             shift and go to state 8
    IMD             shift and go to state 9


state 3

    (6) expression -> NEG . expression
    (2) expression -> . expression AND expression
    (3) expression -> . expression OOR expression
    (4) expression -> . expression IMP expression
    (5) expression -> . expression IMD expression
    (6) expression -> . NEG expression
    (7) expression -> . VAR
    (8) expression -> . LPR expression RPR

    NEG             shift and go to state 3
    VAR             shift and go to state 4
    LPR             shift and go to state 5

    expression                     shift and go to state 10

state 4

    (7) expression -> VAR .

    AND             reduce using rule 7 (expression -> VAR .)
    OOR             reduce using rule 7 (expression -> VAR .)
    IMP             reduce using rule 7 (expression -> VAR .)
    IMD             reduce using rule 7 (expression -> VAR .)
    $end            reduce using rule 7 (expression -> VAR .)
    RPR             reduce using rule 7 (expression -> VAR .)


state 5

    (8) expression -> LPR . expression RPR
    (2) expression -> . expression AND expression
    (3) expression -> . expression OOR expression
    (4) expression -> . expression IMP expression
    (5) expression -> . expression IMD expression
    (6) expression -> . NEG expression
    (7) expression -> . VAR
    (8) expression -> . LPR expression RPR

    NEG             shift and go to state 3
    VAR             shift and go to state 4
    LPR             shift and go to state 5

    expression                     shift and go to state 11

state 6

    (2) expression -> expression AND . expression
    (2) expression -> . expression AND expression
    (3) expression -> . expression OOR expression
    (4) expression -> . expression IMP expression
    (5) expression -> . expression IMD expression
    (6) expression -> . NEG expression
    (7) expression -> . VAR
    (8) expression -> . LPR expression RPR

    NEG             shift and go to state 3
    VAR             shift and go to state 4
    LPR             shift and go to state 5

    expression                     shift and go to state 12

state 7

    (3) expression -> expression OOR . expression
    (2) expression -> . expression AND expression
    (3) expression -> . expression OOR expression
    (4) expression -> . expression IMP expression
    (5) expression -> . expression IMD expression
    (6) expression -> . NEG expression
    (7) expression -> . VAR
    (8) expression -> . LPR expression RPR

    NEG             shift and go to state 3
    VAR             shift and go to state 4
    LPR             shift and go to state 5

    expression                     shift and go to state 13

state 8

    (4) expression -> expression IMP . expression
    (2) expression -> . expression AND expression
    (3) expression -> . expression OOR expression
    (4) expression -> . expression IMP expression
    (5) expression -> . expression IMD expression
    (6) expression -> . NEG expression
    (7) expression -> . VAR
    (8) expression -> . LPR expression RPR

    NEG             shift and go to state 3
    VAR             shift and go to state 4
    LPR             shift and go to state 5

    expression                     shift and go to state 14

state 9

    (5) expression -> expression IMD . expression
    (2) expression -> . expression AND expression
    (3) expression -> . expression OOR expression
    (4) expression -> . expression IMP expression
    (5) expression -> . expression IMD expression
    (6) expression -> . NEG expression
    (7) expression -> . VAR
    (8) expression -> . LPR expression RPR

    NEG             shift and go to state 3
    VAR             shift and go to state 4
    LPR             shift and go to state 5

    expression                     shift and go to state 15

state 10

    (6) expression -> NEG expression .
    (2) expression -> expression . AND expression
    (3) expression -> expression . OOR expression
    (4) expression -> expression . IMP expression
    (5) expression -> expression . IMD expression

    AND             reduce using rule 6 (expression -> NEG expression .)
    OOR             reduce using rule 6 (expression -> NEG expression .)
    $end            reduce using rule 6 (expression -> NEG expression .)
    RPR             reduce using rule 6 (expression -> NEG expression .)
    IMP             shift and go to state 8
    IMD             shift and go to state 9

  ! IMP             [ reduce using rule 6 (expression -> NEG expression .) ]
  ! IMD             [ reduce using rule 6 (expression -> NEG expression .) ]
  ! AND             [ shift and go to state 6 ]
  ! OOR             [ shift and go to state 7 ]


state 11

    (8) expression -> LPR expression . RPR
    (2) expression -> expression . AND expression
    (3) expression -> expression . OOR expression
    (4) expression -> expression . IMP expression
    (5) expression -> expression . IMD expression

    RPR             shift and go to state 16
    AND             shift and go to state 6
    OOR             shift and go to state 7
    IMP             shift and go to state 8
    IMD             shift and go to state 9


state 12

    (2) expression -> expression AND expression .
    (2) expression -> expression . AND expression
    (3) expression -> expression . OOR expression
    (4) expression -> expression . IMP expression
    (5) expression -> expression . IMD expression

    AND             reduce using rule 2 (expression -> expression AND expression .)
    OOR             reduce using rule 2 (expression -> expression AND expression .)
    $end            reduce using rule 2 (expression -> expression AND expression .)
    RPR             reduce using rule 2 (expression -> expression AND expression .)
    IMP             shift and go to state 8
    IMD             shift and go to state 9

  ! IMP             [ reduce using rule 2 (expression -> expression AND expression .) ]
  ! IMD             [ reduce using rule 2 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 6 ]
  ! OOR             [ shift and go to state 7 ]


state 13

    (3) expression -> expression OOR expression .
    (2) expression -> expression . AND expression
    (3) expression -> expression . OOR expression
    (4) expression -> expression . IMP expression
    (5) expression -> expression . IMD expression

    OOR             reduce using rule 3 (expression -> expression OOR expression .)
    $end            reduce using rule 3 (expression -> expression OOR expression .)
    RPR             reduce using rule 3 (expression -> expression OOR expression .)
    AND             shift and go to state 6
    IMP             shift and go to state 8
    IMD             shift and go to state 9

  ! AND             [ reduce using rule 3 (expression -> expression OOR expression .) ]
  ! IMP             [ reduce using rule 3 (expression -> expression OOR expression .) ]
  ! IMD             [ reduce using rule 3 (expression -> expression OOR expression .) ]
  ! OOR             [ shift and go to state 7 ]


state 14

    (4) expression -> expression IMP expression .
    (2) expression -> expression . AND expression
    (3) expression -> expression . OOR expression
    (4) expression -> expression . IMP expression
    (5) expression -> expression . IMD expression

    AND             reduce using rule 4 (expression -> expression IMP expression .)
    OOR             reduce using rule 4 (expression -> expression IMP expression .)
    IMP             reduce using rule 4 (expression -> expression IMP expression .)
    $end            reduce using rule 4 (expression -> expression IMP expression .)
    RPR             reduce using rule 4 (expression -> expression IMP expression .)
    IMD             shift and go to state 9

  ! IMD             [ reduce using rule 4 (expression -> expression IMP expression .) ]
  ! AND             [ shift and go to state 6 ]
  ! OOR             [ shift and go to state 7 ]
  ! IMP             [ shift and go to state 8 ]


state 15

    (5) expression -> expression IMD expression .
    (2) expression -> expression . AND expression
    (3) expression -> expression . OOR expression
    (4) expression -> expression . IMP expression
    (5) expression -> expression . IMD expression

    AND             reduce using rule 5 (expression -> expression IMD expression .)
    OOR             reduce using rule 5 (expression -> expression IMD expression .)
    IMP             reduce using rule 5 (expression -> expression IMD expression .)
    IMD             reduce using rule 5 (expression -> expression IMD expression .)
    $end            reduce using rule 5 (expression -> expression IMD expression .)
    RPR             reduce using rule 5 (expression -> expression IMD expression .)

  ! AND             [ shift and go to state 6 ]
  ! OOR             [ shift and go to state 7 ]
  ! IMP             [ shift and go to state 8 ]
  ! IMD             [ shift and go to state 9 ]


state 16

    (8) expression -> LPR expression RPR .

    AND             reduce using rule 8 (expression -> LPR expression RPR .)
    OOR             reduce using rule 8 (expression -> LPR expression RPR .)
    IMP             reduce using rule 8 (expression -> LPR expression RPR .)
    IMD             reduce using rule 8 (expression -> LPR expression RPR .)
    $end            reduce using rule 8 (expression -> LPR expression RPR .)
    RPR             reduce using rule 8 (expression -> LPR expression RPR .)

